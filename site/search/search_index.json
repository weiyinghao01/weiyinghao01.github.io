{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Docs","text":"<p><code>yh's docs</code></p>"},{"location":"about/","title":"About","text":"<p><code>about me</code> </p> <p>\u9b4f\u82f1\u8c6a</p>"},{"location":"hello/","title":"Hello","text":"<p>\u4e0a\u9762\u662f\u6807\u7b7e\uff0c\u4e0b\u9762\u662f\u6807\u9898\u3002</p>","tags":["HTML5","JavaScript","CSS"]},{"location":"hello/#hello-world","title":"hello world","text":"<p>MkDocs</p>","tags":["HTML5","JavaScript","CSS"]},{"location":"hello/#_1","title":"\u516c\u5f0f","text":"\\begin{equation}   x = a_0 + \\cfrac{1}{a_1            + \\cfrac{1}{a_2            + \\cfrac{1}{a_3 + \\cfrac{1}{a_4} } } } \\end{equation}","tags":["HTML5","JavaScript","CSS"]},{"location":"hello/#_2","title":"\u4e00\u4e9b\u6846","text":"<p>Example</p> <p>This is an example of a blockquote.     <code>markdown     * Sed sagittis eleifend rutrum     * Donec vitae suscipit est     * Nulla tempor lobortis orci</code></p> <p>Note</p> <p>This is an example of a blockquote.     <code>markdown     * Sed sagittis eleifend rutrum     * Donec vitae suscipit est     * Nulla tempor lobortis orci</code></p> <p>Warning</p> <p>This is an example of a blockquote.     <code>markdown     * Sed sagittis eleifend rutrum     * Donec vitae suscipit est     * Nulla tempor lobortis orci</code></p>","tags":["HTML5","JavaScript","CSS"]},{"location":"hello/#_3","title":"\u4ee3\u7801","text":"<pre><code>print(\"hello world\")\nprint(\"hello world\")\nprint(\"hello world\")\nprint(\"hello world\")\nprint(\"hello world\")\nprint(\"hello world\")\n</code></pre> <pre><code># Code block content\n</code></pre> <pre><code># Code block content\n</code></pre>","tags":["HTML5","JavaScript","CSS"]},{"location":"notes/notes/","title":"notes","text":"<p>\u7eaa\u5ff5\u7b2c\u4e00\u6b21\u4e0e\u6770\u54e5coding~</p>"},{"location":"notes/notes/#_1","title":"\u9898\u76ee\u94fe\u63a5","text":"<p>\u8981\u719f\u6089\u53cc\u5411\u94fe\u8868\u7684\u5404\u79cd\u64cd\u4f5c\uff0c\u54c8\u5e0c\u8868\uff0cLRU\u7684\u7b80\u5355\u539f\u7406\u7406\u89e3\u3002</p>"},{"location":"notes/notes/#list","title":"list","text":"<p><code>List</code> \u2014\u2014\u4e00\u79cd\u5e8f\u5217\u5316\u5bb9\u5668\uff0c \u5185\u90e8\u5b9e\u73b0\u4e86\u53cc\u5411\u94fe\u8868\uff0c\u4e0b\u9762\u4e3a<code>List</code> \u7684\u51e0\u4e2a\u5e38\u89c1\u64cd\u4f5c\u3002</p> <ol> <li> <p><code>begin()</code> \u548c <code>end()</code> \uff0c\u8fd4\u56de\u5bf9\u5e94\u4f4d\u7f6e\u7684\u8fed\u4ee3\u5668iterator\u3002</p> </li> <li> <p><code>push_back()</code>\u548c <code>push_front()</code> \uff0c \u5411\u5217\u8868\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\uff0c \u8fd8\u6709 <code>emplace_back()</code> \u548c <code>emplace_front()</code>\u3002</p> </li> <li> <p><code>splice()</code> </p> </li> </ol> <p>C ++ \u5217\u8868\u62fc\u63a5\u51fd\u6570\u7528\u4e8e\u5c06\u5143\u7d20\u4ece\u5217\u8868 y \u8f6c\u79fb\u5230\u6307\u5b9a\u4f4d\u7f6e\u7684\u5217\u8868\u5bb9\u5668\u4e2d\uff0c\u8fd9\u5bfc\u81f4\u4e24\u4e2a\u5217\u8868\u7684\u5927\u5c0f\u90fd\u53d1\u751f\u6539\u53d8\u3002</p> <ul> <li> <p><code>void splice(iterator pos, list&amp; y)</code>\uff1b\u5c06\u6574\u4e2ay\u5217\u8868\u8f6c\u79fb\u5230\u6307\u5b9a\u5217\u8868\u7684\u5bf9\u5e94\u4f4d\u7f6e\u3002</p> <p><code>c++  list&lt;int&gt; li={1,2,3,4};  list&lt;int&gt; li1={5,6,7,8};  list&lt;int&gt;::iterator itr=li.begin();  li.splice(itr,li1);  for(list&lt;int&gt;::iterator itr=li.begin();itr!=li.end();++itr)      std::cout &lt;&lt; *itr &lt;&lt;\" \";  output: 5 6 7 8 1 2 3 4</code>    + <code>void splice(iterator pos, list&amp; y, iterator pos1);</code> \u5c06y\u5217\u8868\u5bf9\u5e94\u4f4d\u7f6e\u7279\u5b9a\u5143\u7d20\u8f6c\u79fb</p> <p><code>c++  list&lt;int&gt; li={9,11,12,13};  list&lt;int&gt; li1={10,6,7,8};  list&lt;int&gt;::iterator itr=li.begin();  list&lt;int&gt;::iterator itr1=li1.begin();  ++itr;  li.splice(itr,li1,itr1);  for(list&lt;int&gt;::iterator itr=li.begin();itr!=li.end();++itr)  std::cout &lt;&lt; *itr &lt;&lt;\" \";  output: 9 10 11 12 13</code></p> </li> <li> <p><code>void splice(iterator pos, list&amp; y, iterator first, iterator last);</code>, \u5c06y\u5217\u8868\u5bf9\u5e94\u533a\u95f4\u8f6c\u79fb</p> <p><code>c++  list&lt;string&gt; li={\"programming language\"};  list&lt;string&gt; li1={\"java\",\"is\",\"a\",\"language\"};  list&lt;string&gt;::iterator itr=li.begin();  list&lt;string&gt;::iterator itr1=li1.begin();  advance(itr1,3);  li.splice(itr,li1,li1.begin(),itr1);  for(list&lt;string&gt;::iterator itr=li.begin();itr!=li.end();++itr)  std::cout &lt;&lt; *itr &lt;&lt;\" \";  output:java is a programming language</code></p> </li> </ul>"},{"location":"notes/notes/#unordered_map","title":"unordered_map","text":"<p><code>unordered_map</code>\uff0c \u65e0\u5e8fmap\u5bb9\u5668\uff0c <code>unordered_map</code> \u548c <code>map</code> \u4ec5\u6709\u4e00\u70b9\u4e0d\u540c\uff0c\u5373 <code>map</code> \u4e2d\u5b58\u50a8\u7684\u6570\u636e\u662f\u6709\u5e8f\u7684\uff0c\u800c <code>unordered_map</code> \u662f\u65e0\u5e8f\u7684\u3002</p> <ol> <li><code>iterator find( const Key&amp; key );</code> , \u67e5\u627e\u4ee5 key \u4e3a\u952e\u7684\u952e\u503c\u5bf9\uff0c\u5982\u679c\u627e\u5230\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u8be5\u952e\u503c\u5bf9\u7684\u6b63\u5411\u8fed\u4ee3\u5668\uff1b\u53cd\u4e4b\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u5bb9\u5668\u4e2d\u6700\u540e\u4e00\u4e2a\u952e\u503c\u5bf9\u4e4b\u540e\u4f4d\u7f6e\u7684\u8fed\u4ee3\u5668end()\u3002</li> <li><code>size_type erase( const Key&amp; key );</code> Removes the element (if one exists) with the key equivalent to key.</li> </ol> <p>\u4ee3\u7801</p> <p>{% spoiler \"code\" %}</p> <pre><code>class LRUCache {\npublic:\n    LRUCache(int capacity):_capacity(capacity){} \n    int get(int key){\n        auto it = _table.find(key);\n        int res = -1;\n        if(it!=_table.end()){\n            _lru.splice(_lru.begin(),_lru,it-&gt;second);\n            res = it-&gt;second-&gt;second;\n        }\n        return res;\n    }\n    void put(int key, int value) {\n        auto it = _table.find(key);\n        if(it!=_table.end()){ // find it\n            _lru.splice(_lru.begin(), _lru, it-&gt;second);\n            it-&gt;second-&gt;second=value;\n        }else{ // not find, insert first       \n            _lru.emplace_front(std::make_pair(key,value));\n            _table[key] = _lru.begin();\n            if(_table.size()&gt;_capacity){\n                _table.erase(_lru.back().first); \n                _lru.pop_back();\n            }\n        }\n    }\nprivate:\n    int _capacity;\n    std::list&lt;std::pair&lt;int,int&gt;&gt; _lru;\n    std::unordered_map&lt;int,std::list&lt;std::pair&lt;int,int&gt;&gt;::iterator&gt;  _table;\n};\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache* obj = new LRUCache(capacity);\n * int param_1 = obj-&gt;get(key);\n * obj-&gt;put(key,value);\n */\n</code></pre> <p>reference</p> <ol> <li>https://en.cppreference.com/</li> <li>https://www.geeksforgeeks.org/list-splice-function-in-c-stl/</li> </ol>"},{"location":"notes/notes2/","title":"title1","text":""},{"location":"notes/notes2/#title2","title":"title2","text":""},{"location":"notes/notes2/#title2_1","title":"title2","text":""}]}
{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Docs","text":"<p><code>yh's docs</code></p>"},{"location":"about/","title":"About","text":"<p>Wei Yinghao</p>"},{"location":"hello/","title":"1. \u7b80\u5355","text":"<p>\u6362\u884c\u9700\u8981\u4e24\u4e2a\u7a7a\u683c <code>emoji</code>:  </p> <p>\u52a0\u91cd\u94fe\u63a5 MkDocs</p>","tags":["HTML5","JavaScript","CSS"]},{"location":"hello/#2","title":"2.\u6570\u5b66\u516c\u5f0f","text":"<p>$$ \\begin{equation}   x = a_0 + \\cfrac{1}{a_1            + \\cfrac{1}{a_2            + \\cfrac{1}{a_3 + \\cfrac{1}{a_4} } } } \\end{equation} $$ \u884c\u5185\u516c\u5f0f x = a_0 + \\cfrac{1}{a_1 + \\cfrac{1}{a_2 + \\cfrac{1}{a_3 + \\cfrac{1}{a_4} } } } \u884c\u5185\u516c\u5f0f \u77e9\u9635\u4e58\u6cd5 A_{m\\times n} \\times B_{n\\times p} = C_{m\\times p}</p>","tags":["HTML5","JavaScript","CSS"]},{"location":"hello/#_1","title":"\u4ee3\u7801","text":"<p><pre><code>print(\"hello world\")\nprint(\"hello world\")\n</code></pre> bubble_sort.py<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre></p> <pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n    return items    \n</code></pre> <pre><code>theme:\n  features:\n    - content.code.annotate # (1)\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol> <p><pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> The <code>range()</code> function is used to generate a sequence of numbers.</p>","tags":["HTML5","JavaScript","CSS"]},{"location":"hello/#_2","title":"\u8868\u683c","text":"1 2 3 1 2 3 1 2 3","tags":["HTML5","JavaScript","CSS"]},{"location":"hello/#_3","title":"\u6846","text":"<p>Example</p> <p>This is an example of a blockquote.     <pre><code>* Sed sagittis eleifend rutrum\n* Donec vitae suscipit est\n* Nulla tempor lobortis orci\n</code></pre></p> <p>Note</p> <p>This is an example of a blockquote.     <pre><code>* Sed sagittis eleifend rutrum\n* Donec vitae suscipit est\n* Nulla tempor lobortis orci\n</code></pre></p> <p>Warning</p> <p>This is an example of a blockquote.     <pre><code>* Sed sagittis eleifend rutrum\n* Donec vitae suscipit est\n* Nulla tempor lobortis orci\n</code></pre></p> <p>Danger</p> <p>This is an example of a blockquote.     <pre><code>* Sed sagittis eleifend rutrum\n* Donec vitae suscipit est\n* Nulla tempor lobortis orci\n</code></pre></p> <p>Bug</p> <p>This is an example of a blockquote.     <pre><code>* Sed sagittis eleifend rutrum\n* Donec vitae suscipit est\n* Nulla tempor lobortis orci\n</code></pre></p> <p>Quote</p> <p>This is an example of a blockquote.     <pre><code>* Sed sagittis eleifend rutrum\n* Donec vitae suscipit est\n* Nulla tempor lobortis orci\n</code></pre></p> <p>Success</p> <p>This is an example of a blockquote.     <pre><code>* Sed sagittis eleifend rutrum\n* Donec vitae suscipit est\n* Nulla tempor lobortis orci\n</code></pre></p> <p>Faq</p> <p>This is an example of a blockquote.     <pre><code>* Sed sagittis eleifend rutrum\n* Donec vitae suscipit est\n* Nulla tempor lobortis orci\n</code></pre></p> <p>Abstract</p> <p>This is an example of a blockquote.     <pre><code>* Sed sagittis eleifend rutrum\n* Donec vitae suscipit est\n* Nulla tempor lobortis orci\n</code></pre></p>","tags":["HTML5","JavaScript","CSS"]},{"location":"notes/cf-742-div2/","title":"cf-742-div2","text":"<p>\u662f\u5144\u5f1f\u5c31\u4e00\u8d77\u6765\u4e0a\u5206 \uff01</p> <p><code>\u6881\u4f6c\u9898\u89e3</code> </p>"},{"location":"notes/cf-742-div2/#b","title":"B","text":"<ol> <li>\u95ee\u9898 : \u6709\u6570\u7ec4a , \u5bf9\u6570\u7ec4\u6240\u6709\u7684\u5143\u7d20\u8fdb\u884c <code>Mex</code> \u548c <code>Xor</code> \u8fd0\u7b97 \uff0c\u7ed3\u679c\u5206\u522b\u4e3a a \u548c b , \u6c42 \u6570\u7ec4 a \u7684\u5143\u7d20\u6700\u5c11\u4e3a\u591a\u5c11\u3002</li> <li>\u6838\u5fc3 :<ul> <li>\u4ee4 <code>x = 0 ^ 1 ^ 2 \u2026\u2026 ^ a-1</code>\uff0c \u5219\u5f53<code>x = b</code>\u65f6 <code>ans = a</code></li> <li>\u5f53 <code>x != b &amp;&amp; x ^ b != a</code> \u65f6\uff0c \u6211\u4eec\u53ef\u4ee5\u6dfb\u52a0 <code>x^b</code> , \u6709 <code>x ^ b ^ x  = b</code>, <code>ans = a + 1</code>;</li> <li>\u5f53 <code>x != b &amp;&amp; x ^ b == a</code>\u65f6\uff0c \u6211\u4eec\u4e0d\u80fd\u6dfb\u52a0 <code>x^b</code>, \u6211\u4eec\u6dfb\u52a0 <code>x ^ b ^ 1</code> \u548c 1 \uff0c \u6709 <code>x ^ x ^ b ^ 1 ^ 1 = b, ans = a + 2</code>;</li> </ul> </li> </ol> <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;cstring&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\nconst int N = 3e5 + 10;\nint w[N];\n\nvoid Init(){\n    for(int i = 1; i &lt; N; ++ i){\n        w[i] = w[i-1]^i;\n    }\n}\n\nint main(){\n    int t;\n    Init();\n    scanf(\"%d\",&amp;t);\n    while(t--){\n        int a, b;\n        scanf(\"%d%d\",&amp;a,&amp;b);\n        int cnt = a;\n        int d = w[a-1]^b;\n        if(w[a-1]==b){\n            printf(\"%d\\n\", cnt);\n        }else if(d==a){\n            printf(\"%d\\n\", cnt+2);\n        }else{\n            printf(\"%d\\n\", cnt+1);\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"notes/cf-742-div2/#c","title":"C","text":"<ol> <li>\u95ee\u9898 : \u89c4\u5b9a\u4e00\u79cd\u52a0\u6cd5\u8fdb\u4f4d\u65f6\u8fdb\u5230 <code>\u4e0b\u4e0b\u4e00\u4f4d</code>\uff0c\u7ed9\u5b9a\u4e00\u4e2a n , \u95ee\u6709\u591a\u5c11\u5bf9\u6b63\u6574\u6570\u4e3a\u8fd9\u79cd\u8fd0\u7b97\u7684\u7ed3\u679c </li> <li> <p>\u6838\u5fc3 :</p> <ul> <li> <p>\u56e0\u4e3a\u5947\u6570\u4f4d\u8fdb\u4f4d\u53ea\u80fd\u8fdb\u5230\u5947\u6570\u4f4d\uff0c\u5076\u6570\u4f4d\u8fdb\u4f4d\u4e5f\u53ea\u80fd\u8fdb\u5230\u5076\u6570\u4f4d \uff0c\u5219\u628a\u6570\u6309\u5947\u5076\u4f4d\u62c6\u6210\u4e24\u4e2a\u6570 a, b \uff0c\u5219\u5f97\u5230a, b\u7684\u52a0\u6cd5\u4e3a\u666e\u901a\u7684\u52a0\u6cd5 \u3002</p> </li> <li> <p>\u4e4b\u548c\u4e3aa, b\u7684\u6570\u5bf9\u5206\u522b\u4e3a <code>a+1, b + 1</code>, \u5219\u6700\u7ec8\u7b54\u6848\u4e3a <code>(a+1)*(b+1)-2</code>\uff0c \u51cf\u53bb\u5176\u4e2d\u4e00\u4e2a\u6570\u4e3a0\u7684\u4e24\u79cd\u60c5\u51b5 \u3002</p> </li> </ul> </li> </ol> <pre><code>#include &lt;iostream&gt;\n\n#include &lt;string&gt;\n\nusing namespace std;\ntypedef long long ll;\n\nint main(){\n    int t;\n    cin &gt;&gt; t;\n    while(t--){\n        string s;\n        cin &gt;&gt; s;\n        int a = 0, b = 0;\n        for(int i = 0; i &lt; s.size(); ++ i){\n            if(i&amp;1){\n                a = a*10 + s[i]-'0';\n            }\n            else{\n                b = b*10 + s[i]-'0';\n            }\n        }\n        printf(\"%lld\\n\", (a+1)*(b+1)-2);\n    }\n    return 0;\n}\n</code></pre>"},{"location":"notes/cf-742-div2/#d","title":"D","text":"<ol> <li>\u95ee\u9898 : \u5b58\u5728 n \u4e2a\u548c\u4e3a s \u7684\u6b63\u6574\u6570\uff0c\u5f53\u628a\u8fd9\u4e9b\u6570<code>\u770b\u4e3a</code>\u5341\u4e00\u8fdb\u5236\u8868\u793a\u7684\u6570\u65f6\uff0c\u5f97\u5230\u4ed6\u4eec\u7684\u548c\uff0c\u8981\u6c42\u5f53\u548c\u6700\u5927\u65f6\u8f93\u51fa\u8fd9n\u4e2a\u6570\u3002</li> <li> <p>\u6838\u5fc3 :</p> <ul> <li> <p>\u6211\u4eec\u53d1\u73b0\u5982\u679c\u5341\u4e00\u8fdb\u5236\u52a0\u6cd5\u8fdb\u4f4d\u4f1a\u6709\u635f\u5931\uff0c\u4e14\u9ad8\u4f4d\u8fdb\u4f4d\u635f\u5931\u6bd4\u4f4e\u4f4d\u8fdb\u4f4d\u635f\u5931\u8981\u5927\uff0c\u6240\u4ee5\u6211\u4eec\u5c3d\u53ef\u80fd\u4e0d\u8fdb\u4f4d\u6216\u8ba9\u4f4e\u4f4d\u8fdb\u4f4d \u3002</p> </li> <li> <p>\u6211\u4eec\u53ef\u4ee5\u6bcf\u4e00\u6b21\u90fd\u5c3d\u53ef\u80fd\u5730\u53d6\u6700\u5927\u7684 $ 10^k$ , \u5373\u5c3d\u91cf\u90fd\u6709\u66f4\u957f\u7684\u4f4d\u6570 \u3002</p> </li> </ul> </li> </ol> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid solve(int s, int n){\n    if(n==1){\n        printf(\"%d\\n\", s);\n        return;\n    }\n    int p = 1;\n    while(p*10&lt;s) p *= 10;   // \n    while(s-p&lt;n-1) p /= 10;  // \u6838\u5fc3\u4e3a\u8fd9\u4e24\u4e2a\u5faa\u73af\uff0c\u4f5c\u7528\u662f\u6316\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u6700\u5927\u768410^k\n    printf(\"%d \", p);\n    solve(s-p, n-1);\n}\n\nint main(){\n    int t;\n    scanf(\"%d\", &amp;t);\n    while(t--){\n        int s, n;\n        cin &gt;&gt; s &gt;&gt; n;\n        if(s&lt;n){\n            printf(\"0\\n\");\n            continue;\n        }\n        solve(s, n);\n    }\n    return 0;\n}\n</code></pre>"},{"location":"notes/cf-742-div2/#e","title":"E","text":"<ol> <li>\u95ee\u9898\u63cf\u8ff0\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u5e8f\u5217 a \uff0c\u6709\u4ee5\u4e0b\u4e24\u79cd\u64cd\u4f5c\uff1a</li> <li><code>1 x y</code>  \u8868\u793a\u5c06 a_x \u4fee\u6539\u4e3a <code>y</code></li> <li><code>2 l r</code>  \u8868\u793a\u8be2\u95ee\u533a\u95f4 <code>[ l , r ]</code> \u4e0a\u7684\u8fde\u7eed\u975e\u9012\u51cf\u5e8f\u5217\u4e2a\u6570\uff0c\u5176\u4e2d\u5355\u4e2a\u6570\u4e5f\u7b97\u4e00\u4e2a\u975e\u9012\u51cf\u5e8f\u5217 </li> <li>\u89e3\u51b3 : \u5178\u578b\u7ebf\u6bb5\u6811\u9898\u578b  </li> </ol> <p>\u5206\u6790 </p> <p>\u6211\u4eec\u8003\u8651 : </p> <p>\u200b   \u8981\u7ef4\u62a4\u8282\u70b9\u7684\u7b54\u6848(\u8fde\u7eed\u975e\u9012\u51cf\u5e8f\u5217\u4e2a\u6570)\uff0c\u5de6\u53f3\u8282\u70b9\u9700\u8981\u5b58\u50a8\u4ec0\u4e48\u4fe1\u606f\uff0c\u6709\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\uff1a</p> <ul> <li>\u5f53<code>tr[2*u].rv &gt; tr[2*u+1].lv</code>\u65f6\uff0c<code>tr[u].ans = tr[2*u] .ans + tr[2*u+1].ans</code></li> <li>\u5f53<code>tr[2*u].rv &lt;= tr[2*u+1].lv</code>\u65f6\uff0c<code>tr[u].ans = tr[2*u].ans + tr[2*u+1].ans + tr[2*u].suffix * tr[2*u+1].prefix</code>  , \u5176\u4e2d prefix \u548c suffix \u5206\u522b\u5b58\u50a8\u5e8f\u5217\u7684<code>\u524d\u7f00\u548c\u540e\u7f00\u6700\u5927\u8fde\u7eed\u975e\u9012\u51cf\u5e8f\u5217\u4e2a\u6570</code> </li> </ul> <p>\u63d0\u793a</p> <p>\u90a3\u4e3a\u4ec0\u4e48\u8981\u5199\u4e24\u4e2aPush_up()\u5462\uff1f \u7b2c\u4e00\u4e2aPush_up()\u4e3a\u4e86\u66f4\u65b0\u6811\u4e2d\u539f\u672c\u7684\u533a\u95f4\uff0c \u800c\u7b2c\u4e8c\u4e2a\u4e3a\u4e86\u4fbf\u4e8e\u5408\u5e76\u5e76\u66f4\u65b0\u67e5\u8be2\u65f6\u7684\u533a\u95f4\uff0c\u5728\u6570\u4e2d\u539f\u672c\u4e0d\u5b58\u5728\u8fd9\u6837\u4e00\u4e2a\u5b8c\u6574\u7684\u533a\u95f4\u3002</p> <p>\u5b8c\u6574\u4ee3\u7801</p> <pre><code>#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\nconst int N = 2e5 + 10;\ntypedef long long ll;\nint a[N];\n\nstruct node{\n    int l, r;\n    int lv, rv;\n    ll suf, pre, ans;\n}tr[4*N];\n\ntypedef struct node Node; \n\n// \u66f4\u65b0\u4e3a\u5173\u952ed \nvoid Push_up(int u){\n    tr[u].lv = tr[2*u].lv, tr[u].rv = tr[2*u+1].rv;\n    tr[u].pre = ((tr[2*u].pre==(tr[2*u].r-tr[2*u].l+1))&amp;&amp;(tr[2*u].rv&lt;=tr[2*u+1].lv))?tr[2*u].pre+tr[2*u+1].pre:tr[2*u].pre;\n    tr[u].suf = ((tr[2*u+1].suf==(tr[2*u+1].r-tr[2*u+1].l+1))&amp;&amp;(tr[2*u+1].lv&gt;=tr[2*u].rv))?tr[2*u+1].suf+tr[2*u].suf:tr[2*u+1].suf;\n    tr[u].ans = tr[2*u].ans + tr[2*u+1].ans;\n    if(tr[2*u].rv &lt;= tr[2*u+1].lv){\n        tr[u].ans += tr[2*u].suf * tr[2*u+1].pre;\n    }\n}\n\nvoid Push_up(Node &amp;u, Node &amp;L, Node &amp;R){\n    u.l = L.l, u.r = R.r, u.lv = L.lv, u.rv = R.rv;  \n    u.pre = ((L.pre==(L.r-L.l+1))&amp;&amp;(L.rv&lt;=R.lv))?L.pre+R.pre:L.pre;\n    u.suf = ((R.suf==(R.r-R.l+1))&amp;&amp;(R.lv&gt;=L.rv))?R.suf+L.suf:R.suf;\n    u.ans = L.ans + R.ans;\n    if(L.rv &lt;= R.lv){\n        u.ans += L.suf * R.pre;\n    }\n}\n\nvoid Build(int u, int l, int r){\n    if(l==r) tr[u] = {l, l, a[l], a[l], 1, 1, 1};\n    else{\n        tr[u].l = l, tr[u].r = r, tr[u].lv = a[l], tr[u].rv = a[r];  // \u6b64\u5904\u6613\u5fd8 \uff01\n        int mid = (l+r)/2;\n        Build(2*u, l, mid), Build(2*u+1, mid+1, r);\n        Push_up(u);\n    }\n}\n\nNode Query(int u, int l, int r){\n    if(tr[u].l==l &amp;&amp; tr[u].r==r){ \n        //cout &lt;&lt; \"-- \u627e\u5230\u5b50\u533a\u95f4\" &lt;&lt; l &lt;&lt; '~' &lt;&lt; r &lt;&lt; endl;  // Debug \u7684\u597d\u5730\u65b9 \n        return tr[u];\n    }else{\n        int mid = (tr[u].l+tr[u].r)/2;\n        if(r&lt;=mid) return Query(2*u, l, min(r, mid));\n        if(l&gt;mid) return Query(2*u+1, max(mid+1, l), r);\n        else{\n            Node res, left, right;\n            left = Query(2*u, l, mid);\n            right = Query(2*u+1, mid+1, r);\n            Push_up(res, left, right);\n            return res;\n        }\n    }\n}\n\nvoid Modify(int u, int th, int x){\n    if(tr[u].l==th&amp;&amp;tr[u].r==th){\n        tr[u].lv = tr[u].rv = x;\n    }else{\n        int mid = (tr[u].l+tr[u].r)/2;\n        if(th&lt;=mid) Modify(2*u, th, x);\n        else Modify(2*u+1,th, x);\n        Push_up(u);\n    }\n}\n\nint main(){\n    int n, m;\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for(int i = 1; i &lt;= n; ++ i) scanf(\"%d\", &amp;a[i]);\n    Build(1, 1, n);\n    while(m--){\n        int k, p, q;\n        scanf(\"%d%d%d\", &amp;k, &amp;p, &amp;q);\n        if(k==1){\n            Modify(1, p, q);\n        }else{\n            printf(\"%lld\\n\", Query(1,p,q).ans);\n        }\n    }\n    return 0;\n}\n</code></pre> <p>\u7ebf\u6bb5\u6811\u5355\u70b9\u4fee\u6539 </p>"}]}